type ide = string;;
type exp = Eint of int | Ebool of bool| Estring of string	| Den of ide | Prod of exp * exp |Sum of exp * exp | Diff of exp * exp |
	Eq of exp * exp | Minus of exp | IsZero of exp | Or of exp * exp | And of exp * exp | Not of exp |
	Ifthenelse of exp * exp * exp | Let of ide * exp * exp | Fun of ide * exp | FunCall of exp * exp | 
	Letrec of ide * exp * exp | Dict of (ide * exp) list | Select of exp * ide | Insert of exp * ide * exp | Remove of exp * ide | Clear of exp | ApplyOver of exp * exp 

(*ambiente polimorfo*)

type 't env = ide -> 't;;
let emptyenv (v : 't) = function x -> v;;
let applyenv (r : 't env) (i : ide) = r i;;
let bind (r : 't env) (i : ide) (v : 't) = function x -> if x = i then v else applyenv r x;;

(*tipi esprimibili*)
type evT = Int of int | String of string | Bool of bool | Unbound | FunVal of evFun | RecFunVal of ide * evFun | DictVal of (ide * evT) list

and evFun = ide * exp * evT env

(*rts*)
(*type checking*)
let typecheck (s : string) (v : evT) : bool = match s with
	| "int" -> (match v with
		|Int(_) -> true 
		|_ -> false) 
	| "bool" -> (match v with
		|Bool(_) -> true 
		|_ -> false) 
    | "string" -> (match v with
		|String(_) -> true 
		|_ -> false) 
	|_ -> failwith("not a valid type");;

(*funzioni primitive*)
let prod x y = if (typecheck "int" x) && (typecheck "int" y) then
    ( match ( x, y) with 
        ( Int(n), Int(u) ) -> Int(n * u )
      | _ -> failwith (" Type error "))
  else failwith ( "Type error" );;

let sum x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Int(n+u)
         | _-> failwith("Type error"))
  else failwith("Type error");;


let diff x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Int(n-u)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let eq x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Bool(n=u)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let minus x = if (typecheck "int" x) 
  then (match x with
           Int(n) -> Int(-n)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let iszero x = if (typecheck "int" x)
  then (match x with
           Int(n) -> Bool(n=0)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let vel x y = if (typecheck "bool" x) && (typecheck "bool" y)
  then (match (x,y) with
           (Bool(b),Bool(e)) -> (Bool(b||e))
         | _-> failwith("Type error"))
  else failwith("Type error");;

let et x y = if (typecheck "bool" x) && (typecheck "bool" y)
  then (match (x,y) with
           (Bool(b),Bool(e)) -> Bool(b&&e)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let non x = if (typecheck "bool" x)
  then (match x with
           Bool(true) -> Bool(false) |
           Bool(false) -> Bool(true)
         | _-> failwith("Type error"))
  else failwith("Type error");;
	
(*interprete*) 
let rec eval (e : exp) (r : evT env) : evT = match e with
	Eint n -> Int n | 
	Ebool b -> Bool b |
	Estring s -> String s |
	IsZero a -> iszero (eval a r) |
	Den i -> applyenv r i |
	Eq(a, b) -> eq (eval a r) (eval b r) |
	Prod(a, b) -> prod (eval a r) (eval b r) |
	Sum(a, b) -> sum (eval a r) (eval b r) |
	Diff(a, b) -> diff (eval a r) (eval b r) |
	Minus a -> minus (eval a r) |
	And(a, b) -> et (eval a r) (eval b r) |
	Or(a, b) -> vel (eval a r) (eval b r) |
	Not a -> non (eval a r) |
	Ifthenelse(a, b, c) -> 
		let g = (eval a r) in
			if (typecheck "bool" g) 
				then (if g = Bool(true) then (eval b r) else (eval c r))
				else failwith ("nonboolean guard") |
    Let(i, e1, e2) -> eval e2 (bind r i (eval e1 r)) |
	Fun(i, a) -> FunVal(i, a, r) |
	FunCall(f, eArg) -> 
		let fClosure = (eval f r) in
			(match fClosure with
				FunVal(arg, fBody, fDecEnv)->
					eval fBody (bind fDecEnv arg (eval eArg r)) |
				RecFunVal(g, (arg, fBody, fDecEnv)) -> 
					let aVal = (eval eArg r) in
						let rEnv = (bind fDecEnv g fClosure) in
							let aEnv = (bind rEnv arg aVal) in
								eval fBody aEnv |
				_ -> failwith("non functional value")) |
				
	Letrec(f, funDef, letBody) ->
			(match funDef with
	    		Fun(i, fBody) -> let r1 = (bind r f (RecFunVal(f, (i, fBody, r)))) in
	                 			                eval letBody r1 |
	    		_ -> failwith("non functional def"))|
	 			
	Dict(lst) -> DictVal(evalList lst r )|
	
	Select(d,id) ->
				(match (eval d r) with 
					DictVal(lst)-> lookup (id ,lst) | 
					_->failwith("no dict value") ) |
					
	
	ApplyOver(exf,exd) ->
				let valexp=(eval exd r) in
			    	let fval= (eval exf r) in
					(match valexp , fval with 
						DictVal(lst), FunVal(arg, fBody, fDecEnv)-> DictVal(apply(fval,lst)) |
						 _->failwith("non dict or fuctional value"))|
	Insert(d,id,arg)->
			let e=(eval arg r) in
			(match (eval d r) with 
				 DictVal(lst)-> if (noduplicatekey (id, lst)) then failwith("wrong field") else (DictVal((id,e)::lst))|
				_->failwith("no dict value"))|
	
	Remove(d,id)->
				(match (eval d r)  with 
						DictVal(lst)-> DictVal( remove id lst )|
						 _->failwith("no dict value")) 
	(*Clear(d)-> DictVal([]) |
	*)
	
	and remove id lst = match lst with
	|[]->[]
    |(id1,arg)::rest -> if (id1=id) then rest else (id1,arg)::(remove id rest )
	  
	
					
	and noduplicatekey(id,lst)=
		match lst with
		|[]->false
		|(id1,arg)::rest-> if(id1=id) then true else noduplicatekey(id,rest) 
	
		
	and apply (fClosure ,d) = match fClosure, d with 
	 |_ , []-> []
	| FunVal(arg, fBody, fDecEnv),(id,arg2)::rest-> if(typecheck "string" arg2) then apply (fClosure,rest) else
													let g=eval fBody (bind fDecEnv arg arg2) in
														(id,g)::(apply (fClosure,rest))													
	|_,_ -> failwith("no dict value")
	
	and lookup(id,lst) =
		match lst with
		|	[]->Unbound
		|	(id1,arg)::rest-> if(id1=id) then arg else lookup(id,rest) 
		|	_->failwith("wrong dict field") 
	
	and evalList lst r = match lst with
			    | [] -> [] 
				| (id , arg)::rest -> (id, (eval arg r) )::(evalList rest r)
			
;;
(* =============================  TESTS  ================= *)

let env0 = emptyenv Unbound;;
let Dict0= Dict([]);; (* creo un dizionario vuoto*)
let Dict1= Dict(("Nome", Estring("Martina"))::("Cognome", Estring("Trigilia"))::("Comune di residenza", Estring("Scicli"))::("Età",Eint(22))::[]);;(*creo un dizionario con una serie di campi-valori*)
let Dict2= Dict(("Nome", Estring("Angela"))::("Cognome", Estring("Ragusa"))::("Comune di residenza", Estring("Modica"))::("Età",Eint(50))::[]);;(*creo un dizionario con una serie di campi-valori*)
let Fun1 = Fun("x", Div(Den "x", Prod(Den "x", Den "5"));; (*Funzione che calcola (x/(x*5))*)
let Fun2 = Fun("x", Sum(Den "x", Eint 1));; (*Funzione che incrementa di 1 il parametro x*)
(*ottengo una serie di campi da Dict1*)
let prova01=Select(Dict1, "Comune di residenza");;
let prova11=Select(Dict1, "Età");;
let prova21=Select(Dict1, "Matricola");; (*genera un errore poichè il campo Matricola non è inserito in Dict2*)
(*eseguo una serie di operazioni su Dict1*)
let Dict3=Insert(Dict1,"Peso kg",Eint(57));;
let Dict4=Insert(Dict3,"Altezza cm",Eint(163));;
let Dict5=Insert(Dict4,"Matricola",Eint(532155));;
let Dict6=Remove(Dict5,"Nome");;
let Dict7=Clear(Dict6);;
let Dict8=ApplyOver(Fun1,Dict6);;
let Dict8=ApplyOver(Fun2,Dict6);;
(*ottengo una serie di campi da Dict2*)
let prova02=Select(Dict2, "Comune di residenza");;
let prova12=Select(Dict2, "Età");;
let prova22=Select(Dict2, "Professione");; (*genera un errore poichè il campo Professione non è inserito in Dict2*)
(*eseguo una serie di operazioni su Dict2*)
let Dict9=Insert(Dict2,"Peso",Eint(65));;
let Dict10=Insert(Dict9,"Altezza cm",Eint(170));;
let Dict11=Insert(Dict10,"Professione",Estring("Infermiera"));;
let Dict12=Remove(Dict11,"Nome");;
let Dict13=Clear(Dict9);;
let Dict8=ApplyOver(Fun1,Dict11);;
let Dict8=ApplyOver(Fun2,Dict11);;
